const QRCode = require('qrcode');
const fs = require('fs');
const path = require('path');
const protobuf = require('protobufjs');

// Base32 encoding/decoding functions
function base32ToBytes(base32) {
  const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567';
  let bits = '';
  let value = 0;
  let output = [];
  
  for (let i = 0; i < base32.length; i++) {
    value = (value << 5) | alphabet.indexOf(base32[i]);
    bits += 5;
    
    if (bits >= 8) {
      output.push((value >>> (bits - 8)) & 255);
      bits -= 8;
    }
  }
  
  return new Uint8Array(output);
}

// Google Authenticator Migration Protocol Buffer Schema
const migrationProtoSchema = {
  "nested": {
    "MigrationPayload": {
      "fields": {
        "otpParameters": {
          "rule": "repeated",
          "type": "OtpParameters",
          "id": 1
        },
        "version": {
          "type": "int32",
          "id": 2
        },
        "batchSize": {
          "type": "int32",
          "id": 3
        },
        "batchIndex": {
          "type": "int32",
          "id": 4
        },
        "batchId": {
          "type": "int32",
          "id": 5
        }
      }
    },
    "OtpParameters": {
      "fields": {
        "secret": {
          "type": "bytes",
          "id": 1
        },
        "name": {
          "type": "string",
          "id": 2
        },
        "issuer": {
          "type": "string",
          "id": 3
        },
        "algorithm": {
          "type": "Algorithm",
          "id": 4
        },
        "digits": {
          "type": "DigitCount",
          "id": 5
        },
        "type": {
          "type": "OtpType",
          "id": 6
        },
        "counter": {
          "type": "int64",
          "id": 7
        }
      }
    },
    "Algorithm": {
      "values": {
        "ALGORITHM_TYPE_UNSPECIFIED": 0,
        "SHA1": 1,
        "SHA256": 2,
        "SHA512": 3,
        "MD5": 4
      }
    },
    "DigitCount": {
      "values": {
        "DIGIT_COUNT_UNSPECIFIED": 0,
        "SIX": 1,
        "EIGHT": 2
      }
    },
    "OtpType": {
      "values": {
        "OTP_TYPE_UNSPECIFIED": 0,
        "HOTP": 1,
        "TOTP": 2
      }
    }
  }
};

// –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ protobuf —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function createTestMigrationData() {
  console.log('‚ö†Ô∏è  –í–ê–ñ–ù–û–ï –ü–†–ò–ú–ï–ß–ê–ù–ò–ï:');
  console.log('–ü—Ä–æ—Ç–æ–∫–æ–ª –º–∏–≥—Ä–∞—Ü–∏–∏ Google Authenticator –ù–ï –≤–∫–ª—é—á–∞–µ—Ç –ø–æ–ª–µ period –≤ protobuf —Å—Ö–µ–º–µ.');
  console.log('–ü–æ—ç—Ç–æ–º—É –≤—Å–µ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –±—É–¥—É—Ç –∏–º–µ—Ç—å –ø–µ—Ä–∏–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30 —Å–µ–∫—É–Ω–¥.');
  console.log('–≠—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∞–º–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞, –∞ –Ω–µ –Ω–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.\n');

  // –°–æ–∑–¥–∞–µ–º protobuf root –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ö–µ–º—É
  const root = protobuf.Root.fromJSON(migrationProtoSchema);
  const MigrationPayload = root.lookupType('MigrationPayload');

  // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
  const testAccounts = [
    {
      secret: base32ToBytes('JBSWY3DPEHPK3PXP'),
      name: 'user@example.com',
      issuer: 'TestMigration1',
      algorithm: 1, // SHA1
      digits: 1,    // SIX (6 digits)
      type: 2       // TOTP
    },
    {
      secret: base32ToBytes('HXDMVJECJJWSRB3HWIZR4IFUGFTMXBOZ'),
      name: 'admin@test.com', 
      issuer: 'TestMigration2',
      algorithm: 1, // SHA1
      digits: 1,    // SIX (6 digits)  
      type: 2       // TOTP
    }
  ];

  // –°–æ–∑–¥–∞–µ–º payload
  const payload = {
    otpParameters: testAccounts,
    version: 1,
    batchSize: testAccounts.length,
    batchIndex: 0,
    batchId: 0
  };

  // –ö–æ–¥–∏—Ä—É–µ–º –≤ protobuf
  const message = MigrationPayload.create(payload);
  const buffer = MigrationPayload.encode(message).finish();
  
  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
  const base64Data = Buffer.from(buffer).toString('base64');
  
  return base64Data;
}

async function generateMigrationQR() {
  console.log('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ QR-–∫–æ–¥–∞...\n');
  
  const migrationData = createTestMigrationData();
  const migrationUrl = `otpauth-migration://offline?data=${migrationData}`;
  
  console.log('–ú–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π URL:');
  console.log(migrationUrl);
  console.log();
  
  try {
    const qrCodePath = path.join(__dirname, 'test-migration-qr.png');
    await QRCode.toFile(qrCodePath, migrationUrl, {
      width: 300,
      margin: 2,
      color: {
        dark: '#000000',
        light: '#FFFFFF'
      }
    });
    console.log(`‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π QR-–∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${qrCodePath}`);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞: ${error.message}`);
  }
  
  console.log('\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é:');
  console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ TOTP Decoder');
  console.log('2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ test-migration-qr.png');
  console.log('3. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –±—É–¥—É—Ç –∏–º–µ—Ç—å –ø–µ—Ä–∏–æ–¥ 30—Å');
  console.log('4. –°—Ä–∞–≤–Ω–∏—Ç–µ —Å –æ–±—ã—á–Ω—ã–º–∏ QR-–∫–æ–¥–∞–º–∏ (test-qr-*.png), –≥–¥–µ –ø–µ—Ä–∏–æ–¥ –∏–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  
  console.log('\nüîç –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ:');
  console.log('- –ú–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π QR: –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã —Å –ø–µ—Ä–∏–æ–¥–æ–º 30—Å (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞)');
  console.log('- –û–±—ã—á–Ω—ã–µ QR: –ø–µ—Ä–∏–æ–¥ –∏–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è –∏–∑ URL (15—Å, 30—Å, 60—Å, 120—Å)');
}

generateMigrationQR().catch(console.error);